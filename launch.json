{
  "version": "0.2.0",
  "configurations": [
    {
      "type": "bashdb",
      "request": "launch",
      "name": "Bash-Debug (hardcoded script name)",
      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/tools/perf/perf-archive.sh",
      "args": [
        "perf.test.data",
        "--all",
        "--exclude-buildids",
        "${workspaceFolder}/buildids_blacklist.txt"
      ]
    },

    {
      "name": "(gdb) perf report debug",
      "type": "cppdbg",
      "request": "launch",
      "program": "${workspaceFolder}/tools/perf/perf",
      "args": [
        "report",
        "-i",
        "${workspaceFolder}/tools/perf/perf.c2c.data",
        "--vmlinux",
        "/home/tli7/sandbox/linux/vmlinux",
        "--objdump",
        "/usr/bin/objdump"
      ],
      "stopAtEntry": false,
      "cwd": "${workspaceFolder}",
      "environment": [],
      "externalConsole": false,
      "MIMode": "gdb",
      "setupCommands": [
        {
          "description": "Enable pretty-printing for gdb",
          "text": "-enable-pretty-printing",
          "ignoreFailures": true
        },
        {
          "description": "Set Disassembly Flavor to Intel",
          "text": "-gdb-set disassembly-flavor intel",
          "ignoreFailures": true
        },
        {   "description":"In this mode GDB will be attached to both processes after a call to fork() or vfork().",
            "text": "-gdb-set detach-on-fork off",
            "ignoreFailures": true
        },
        {   "description": "The new process is debugged after a fork. The parent process runs unimpeded.",
            "text": "-gdb-set follow-fork-mode child",
            "ignoreFailures": true
        }
      ],
      "preLaunchTask": "build linux perf"
    },

    {
      "name": "(gdb) perf c2c debug",
      "type": "cppdbg",
      "request": "launch",
      "program": "${workspaceFolder}/tools/perf/perf",
      "args": [
        "c2c",
        "report",
        "-i",
        "${workspaceFolder}/tools/perf/perf.c2c.data",
        "--vmlinux",
        "/home/tli7/sandbox/linux/vmlinux"
      ],
      "stopAtEntry": false,
      "cwd": "${workspaceFolder}",
      "environment": [],
      "externalConsole": false,
      "MIMode": "gdb",
      "setupCommands": [
        {
          "description": "Enable pretty-printing for gdb",
          "text": "-enable-pretty-printing",
          "ignoreFailures": true
        },
        {
          "description": "Set Disassembly Flavor to Intel",
          "text": "-gdb-set disassembly-flavor intel",
          "ignoreFailures": true
        },
        {   "description":"In this mode GDB will be attached to both processes after a call to fork() or vfork().",
            "text": "-gdb-set detach-on-fork off",
            "ignoreFailures": true
        },
        {   "description": "The new process is debugged after a fork. The parent process runs unimpeded.",
            "text": "-gdb-set follow-fork-mode child",
            "ignoreFailures": true
        }
      ],
      "preLaunchTask": "build linux perf"
    },
    {
      "name": "Start and debug kernel in a VM",
      "type": "cppdbg",
      "request": "launch",
      "preLaunchTask": "Start virtual machine",
      "internalConsoleOptions": "neverOpen",

      "miDebuggerPath": "gdb-multiarch",
      "miDebuggerServerAddress": "localhost:1234",
      "setupCommands": [
        {
          "description": "Give some time for the VM to spin-up",
          "text": "-interpreter-exec console \"shell ${workspaceFolder}/.vscode/tasks.sh wait-for-vm\"",
          "ignoreFailures": false,
        },
        {
          "description": "Enable autoloading of Linux GDB scripts",
          "text": "add-auto-load-safe-path ${workspaceFolder}/scripts/gdb",
          "ignoreFailures": true,
        },
        {
          "description": "Format Locals as HEX by default",
          "text": "set output-radix 16",
          "ignoreFailures": true,
        },
      ],

      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/vmlinux",

      "hardwareBreakpoints": { "require": true },
    },
    {
      "name": "Start and debug kernel in a VM from early-boot",
      "type": "cppdbg",
      "request": "launch",
      "preLaunchTask": "Start virtual machine waiting for debugger",
      "internalConsoleOptions": "neverOpen",

      "miDebuggerPath": "gdb-multiarch",
      "miDebuggerServerAddress": "localhost:1234",
      "setupCommands": [
        {
          "description": "Give some time for the VM to spin-up",
          "text": "-interpreter-exec console \"shell ${workspaceFolder}/.vscode/tasks.sh wait-for-vm\"",
          "ignoreFailures": true
        },
        {
          "description": "Enable autoloading of Linux GDB scripts",
          "text": "add-auto-load-safe-path ${workspaceFolder}/scripts/gdb",
          "ignoreFailures": true,
        },
        {
          "description": "Format Locals as HEX by default",
          "text": "set output-radix 16",
          "ignoreFailures": true,
        },
      ],

      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/vmlinux",

      "hardwareBreakpoints": {
        "require": true,
      },
    },
    {
      "name": "Debug kernel in an already-running VM",
      "type": "cppdbg",
      "request": "launch",
      "internalConsoleOptions": "neverOpen",

      "miDebuggerPath": "gdb-multiarch",
      "miDebuggerServerAddress": "localhost:1234",
      "setupCommands": [
        {
          "description": "Wait for the VM to spin-up",
          "text": "-interpreter-exec console \"shell ${workspaceFolder}/.vscode/tasks.sh wait-for-vm\"",
          "ignoreFailures": false,
        },
        {
          "description": "Enable autoloading of Linux GDB scripts",
          "text": "add-auto-load-safe-path ${workspaceFolder}/scripts/gdb",
          "ignoreFailures": true,
        },
        {
          "description": "Format Locals as HEX by default",
          "text": "set output-radix 16",
          "ignoreFailures": true,
        },
      ],

      "cwd": "${workspaceFolder}",
      "program": "${workspaceFolder}/vmlinux",

      "hardwareBreakpoints": { "require": true },
    }
  ]
}
